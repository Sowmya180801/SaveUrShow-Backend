// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SaveUrShowUsingCFA.Models;

#nullable disable

namespace SaveUrShowUsingCFA.Migrations
{
    [DbContext(typeof(SaveUrShowUsingCFADbContext))]
    [Migration("20231110050300_mg1")]
    partial class mg1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SaveUrShowUsingCFA.Models.BookingTicket", b =>
                {
                    b.Property<long>("Bookid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Bookid"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("Seatnum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("Userid")
                        .HasColumnType("int");

                    b.HasKey("Bookid");

                    b.HasIndex("MovieId");

                    b.HasIndex("Userid");

                    b.ToTable("BookingTicket");
                });

            modelBuilder.Entity("SaveUrShowUsingCFA.Models.feedback", b =>
                {
                    b.Property<int>("feedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("feedid"), 1L, 1);

                    b.Property<string>("moviename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.Property<string>("review")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("feedid");

                    b.ToTable("feedback");
                });

            modelBuilder.Entity("SaveUrShowUsingCFA.Models.FindTicket", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieId"), 1L, 1);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Moviename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Theatrename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("charges")
                        .HasColumnType("int");

                    b.Property<string>("duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("heroimg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("heroineimg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("heroinename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("heroname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("synopsis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("trailer")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("MovieId");

                    b.ToTable("FindTicket");
                });

            modelBuilder.Entity("SaveUrShowUsingCFA.Models.Registration", b =>
                {
                    b.Property<int>("userid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userid"), 1L, 1);

                    b.Property<string>("confirmpassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("usertype")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userid");

                    b.ToTable("Registration");
                });

            modelBuilder.Entity("SaveUrShowUsingCFA.Models.BookingTicket", b =>
                {
                    b.HasOne("SaveUrShowUsingCFA.Models.FindTicket", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId");

                    b.HasOne("SaveUrShowUsingCFA.Models.Registration", "User")
                        .WithMany()
                        .HasForeignKey("Userid");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
